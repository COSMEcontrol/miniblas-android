package com.example.miniblas;

import java.util.ArrayList;
import java.util.Vector;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.EditText;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.actionbarsherlock.app.SherlockActivity;
import com.actionbarsherlock.view.ActionMode;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.example.arcadio.Conexion;
import com.example.arcadio.CosmeListener;
import com.example.arcadio.EstadosCosme;
import com.example.arcadio.Telegrama;

public class ListaCestas extends SherlockActivity implements CosmeListener {

	public Context yo;
	public AdaptadorListaElementos adapter = null;
	public ListView lv_lista;
	private Vector<String> lista;
	private ActionMode mActionMode;
	private int numSeleccionados;
	public Vector<Integer> listaElementosSeleccionados;
	public MenuItem iconoEstado = null;
	public Conexion conex;
	
	public static final String NOMBRE_CESTA = "NOMBRE_CESTA";
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		setTheme(R.style.Theme_Sherlock_Light);
		super.onCreate(savedInstanceState);
		setContentView(R.layout.lyt_lista_cestas);
		numSeleccionados = 0;
		listaElementosSeleccionados = new Vector<Integer>();
		lista = new Vector<String>();
		lv_lista= (ListView) findViewById(R.id.container);
		getSupportActionBar().setDisplayHomeAsUpEnabled(true);
		getSherlock().setUiOptions(ActivityInfo.UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW);
		yo = this;
		adapter = new AdaptadorListaElementos(this,lista);
		lv_lista.setAdapter(adapter); 
		
		final ListaCestas lc = this;
		
		new Thread(new Runnable() {
		     public void run() {

		    	 try {
						Thread.sleep(2000);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
		    	 
					/*
					 Conexion conexion = new Conexion();
					 conexion.conectarSocket();
					 
					 ArrayList<String> listaVariables = new ArrayList<String>();
					
					 listaVariables.add("s1");
					 listaVariables.add("SISTEMA.tiempo_ciclo.rt");
					 listaVariables.add("SISTEMA.REF.DOUBLE");
					 
					 conexion.crearCesta("Luis", listaVariables);
					 */
					
					
					Conexion conexion = new Conexion(lc);
					conex = conexion;
					conexion.conectarSocket();
					
					conexion.crearCesta("Cesta_1", 0);
					conexion.crearCesta("Cesta_2", 0);
					conexion.crearCesta("Cesta_3", 0);
					
					ArrayList<String> listaVariables = new ArrayList<String>();
					
					listaVariables.add("s1");
					listaVariables.add("SISTEMA.tiempo_ciclo.rt");
					listaVariables.add("SISTEMA.REF.DOUBLE");
					
					
					/*
					try
					{
						Thread.sleep(2000);
					}
					catch(Exception ex) {}
					
					mensajero.enviarTelegrama(sintaxisTelegrama.getTelegrama_periodoCesta("Julian", 0));
					*/
				

		    }
		}).start();
		

	}
	public void nuevaCesta(){
		AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(yo);
		LayoutInflater inflater = (LayoutInflater) yo.getSystemService(yo.LAYOUT_INFLATER_SERVICE);
		final View layout = inflater.inflate(R.layout.lyt_editar_cesta,null);
		alertDialogBuilder.setView(layout);
		//opciones del dialog
			alertDialogBuilder
				.setTitle(getResources().getString(R.string.nueva_cesta))
				.setCancelable(false)
				.setPositiveButton(getResources().getString(R.string.Guardar),new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog,int id) {
						EditText et_nombre = (EditText) layout.findViewById(R.id.et_nombre_cesta);
						EditText et_periodo_refresco = (EditText) layout.findViewById(R.id.et_periodo_refresco);
						conex.crearCesta(et_nombre.getText().toString(), Integer.valueOf(et_periodo_refresco.getText().toString()));
						//listaPerfiles.add(et_perfilNuevo.getText().toString());
						//lista.add(((TextView) layout.findViewById(R.id.et_nombre)).getText().toString());
					}
				  })
				.setNegativeButton(getResources().getString(R.string.Cancelar),new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog,int id) {
						// if this button is clicked, just close
						// the dialog box and do nothing
						dialog.cancel();
					}
				}); 

		AlertDialog alertDialog = alertDialogBuilder.create();
		alertDialog.show();
	}
	
	public boolean onCreateOptionsMenu(Menu menu) {
		MenuInflater inflater = getSupportMenuInflater();
		inflater.inflate(R.menu.menu_cestas, menu);
		iconoEstado= (MenuItem) menu.findItem(R.id.estado);
		//iconoEstado.setIcon(R.drawable.desconectado);
		return true;
	}
	@Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
		case R.id.menu_anadir_cesta:
			nuevaCesta();
			return true;
		case R.id.estado:
			((MenuItem) iconoEstado).setIcon(R.drawable.conectado);
			return true;
		case android.R.id.home:
	        finish();
	        return(true);
		default:
			return false;
		}
    }
	private ActionMode.Callback mActionModeCallback = new ActionMode.Callback() {

	    // Called when the action mode is created; startActionMode() was called
	    @Override
	    public boolean onCreateActionMode(ActionMode mode, Menu menu) {
	        // Inflate a menu resource providing context menu items
	        MenuInflater inflater = mode.getMenuInflater();
	        //si el numero de elementos seleccionados es mayor de 1 no mostrar el boton de editar
	        if(numSeleccionados>1){
	        	inflater.inflate(R.menu.menu_seleccion_noeditar, menu);
	        }else{
	        	inflater.inflate(R.menu.menu_seleccion, menu);
	        }
	        return true;
	    }
	    // Called each time the action mode is shown. Always called after onCreateActionMode, but
	    // may be called multiple times if the mode is invalidated.
	    @Override
	    public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
	        return false; // Return false if nothing is done
	    }

	    // Called when the user selects a contextual menu item
	    @Override
	    public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
	        switch (item.getItemId()) {
	            case R.id.menu_eliminar:
	                Log.v("Eliminar cesta", "Eliminar cesta");
	                for(Integer vista: listaElementosSeleccionados){
	                	Log.v("Elemeno", String.valueOf(vista));
	                	lista.removeElementAt(Integer.valueOf(vista));
	                }
	                numSeleccionados = 0;
	                listaElementosSeleccionados.clear();
	                adapter.notifyDataSetChanged();
	                mActionMode.finish();
	                return true;
	            case R.id.menu_editar:
	            	return true;
	            default:
	                return false;
	        }
	    }

	    // Called when the user exits the action mode
	    @Override
	    public void onDestroyActionMode(ActionMode mode) {
	        mActionMode = null;
	    }

	};

	@Override
	public void notificarRefrescoVariables(String _nombreCesta,
			ArrayList _listaVariables) {
		// TODO Auto-generated method stub
		
	}
	
	
	
	
	/**
	 * Adaptador para mostrar en la interfaz los elementos de la lista.
	 * @author alberto
	 *
	 */
	public class AdaptadorListaElementos extends BaseAdapter implements Filterable{
		
		private final Activity actividad;
		private final Vector<String> lista;
		
		public AdaptadorListaElementos(Activity actividad,Vector<String> lista) {
			super();
			this.actividad = actividad;
			this.lista=lista;
		}
		// Este metodo se ejecuta cada vez que la lista tiene que cargar una
		public View getView(final int position, View convertView, ViewGroup parent) {
			// Con estas dos l√≠neas lo que hacemos es inflar una fila
			LayoutInflater inflater = actividad.getLayoutInflater();
			final View item = inflater.inflate(R.layout.lyt_cesta, null, true); 
			
			item.setOnClickListener( new View.OnClickListener()
	        {
	                public void onClick(View v)
	                {
	                	Intent intent = new Intent(yo, ListaCestas.class);
						intent.putExtra(NOMBRE_CESTA,lista.get(position));
						startActivity(intent);    
	                }});
			((TextView) item.findViewById(R.id.tv_nom_cesta)).setText(lista.get(position));
	        // Set a click listener for the "X" button in the row that will remove the row.
	        ((CheckBox) item.findViewById(R.id.ch_marcar_cesta)).setOnCheckedChangeListener(new OnCheckedChangeListener() {	
				@Override
				public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
					if (isChecked) {
						// Start the CAB using the ActionMode.Callback defined above
						numSeleccionados++;
						listaElementosSeleccionados.add(position);
				        mActionMode = startActionMode(mActionModeCallback);
				        mActionMode.setTitle(String.valueOf(numSeleccionados)+" seleccionadas");

			        } else{
			        	numSeleccionados--;
			        	listaElementosSeleccionados.remove(position);
			        	mActionMode.setTitle(String.valueOf(numSeleccionados)+" seleccionadas");
			        	//si no hay ninguno seleccionado borrar la barra
			        	if(numSeleccionados==0){
			        		mActionMode.finish();
			        	}
			        }
					
				}
	        });
		return (item);
		}
		@Override
		public int getCount() {
			return lista.size();
		}
		@Override
		public Object getItem(int position) {
			return lista.elementAt(position);
		}
		@Override
		public long getItemId(int position) {
			return position;
		}
		
		public Filter getFilter() {
		    return new Filter() {

		        @Override
		        protected FilterResults performFiltering(CharSequence constraint) {
		        	Log.v("Texto", String.valueOf(constraint));
		            final FilterResults oReturn = new FilterResults();
		            final ArrayList<String> results = new ArrayList<String>();
		            results.clear();
		            for(String resultado: lista){
		            	Log.v("Es el valor de lista en el filtro", resultado);
		            	
		            }
		            if (constraint != null) {

		              
		                    for (String g:lista) {
		                        if (g.toLowerCase()
		                                .contains(String.valueOf(constraint)))
		                        	results.add(g);
		                        	Log.v("buscar", String.valueOf(constraint)+String.valueOf(g.toLowerCase()));
		                    }
		               
		                oReturn.values = results;
		                
		            }
		            else
		            	Toast.makeText(yo, "nuloooo", Toast.LENGTH_SHORT).show();
		            return oReturn;
		        }

		        @SuppressWarnings("unchecked")
		        @Override
		        protected void publishResults(CharSequence constraint,
		                FilterResults results) {
		            lista.clear();
			            for(String resultado: (ArrayList<String>) results.values){
			            	Log.v("Resultados encontrados", resultado);
			            	lista.add(resultado);
			            }
		            adapter.notifyDataSetChanged();
		        }
		    };
		}
	}
	
	
	
	
	@Override
	public void notificarEstadoConexion(final EstadosCosme _estado) {
		ListaCestas.this.runOnUiThread(new Runnable() {
		     public void run() {
		    	 Log.v("Estado de conexion", _estado.toString());
		 		
		 		if(_estado == EstadosCosme.CONEXION_INTERRUMPIDA){
		 			iconoEstado.setIcon(R.drawable.desconectado);
		 		}
		 		else if(_estado == EstadosCosme.COMUNICACION_OK){
		 			iconoEstado.setIcon(R.drawable.conectado);
		 		}
		    }
		});
		
		
	}
	@Override
	public void notificarError(String _txtError) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void notificarEvento(final EstadosCosme _codEvento, final Telegrama _tlg) {
		//filtro de notificaciones
		ListaCestas.this.runOnUiThread(new Runnable() {
		     public void run() {
		    	 if(_codEvento==EstadosCosme.RECIBIDA_CESTA){
		    		 lista.add(_tlg.getNombreCesta());
		    		 adapter.notifyDataSetChanged();
		 		}
		     }
		});
		
		
	}

}
